
var localDB = {
    version: '0.0.1',
    // Application Constructor
    initialize: function() {
        this.bindEvents();
    },
    // Bind Event Listeners
    //
    // Bind any events that are required on startup. Common events are:
    // 'load', 'deviceready', 'offline', and 'online'.
    bindEvents: function() {
        // wait for device API libraries to load
        document.addEventListener('deviceready', this.onDeviceReady, false);
    },
    // deviceready Event Handler
    //
    // The scope of 'this' is the event. In order to call class methods, we
    // must explicitly call 'localDB.myMethod(...);'
    onDeviceReady: function() {
      localDB.db = window.openDatabase("healthy", "1.0", "Healthy New York", 1000000);
      localDB.db.transaction(localDB.checkVersion);
    },
    checkVersion: function(tx) {
        tx.executeSql('SELECT version FROM installed ORDER BY timestamp DESC LIMIT 1', [],
          localDB.confirmInstall,
          function() {
            localDB.db.transaction(localDB.install,
              function(e){
                alert('localDB::TX::install ERROR'+e.message);
              },
              function() {
                var content = localDB.getInitialContent();
                localDB.installContent(content).done(function(success) {
                  if (success) {
                    $(document).trigger('dbInstallConfirmed');
                  } else {
                    console.log('Failed to populate content');
                  }
                });
              }
            );
          }
        );
    },
    confirmInstall: function(tx, result) {
        if (result.rows.length < 1 || localDB.version !== result.rows.item(0).version)  {
          localDB.db.transaction(localDB.install,
            function(e){
              alert('localDB::TX::install ERROR'+e.message);
            },
            function() {
              $(document).trigger('dbInstallConfirmed');
            }
          );
        } else {
          $(document).trigger('dbInstallConfirmed');
        }
    },
    install: function(tx) {
      tx.executeSql('CREATE TABLE IF NOT EXISTS bookmark (content_id INTEGER, content_table TEXT, PRIMARY KEY(content_id, content_table))');
      tx.executeSql('CREATE TABLE IF NOT EXISTS content ( \
        import_id INTEGER PRIMARY KEY, \
        type TEXT, \
        title TEXT, \
        icon_class TEXT, \
        body TEXT, \
        list_contains TEXT)'
      );

      tx.executeSql('CREATE TABLE IF NOT EXISTS personal_info ( \
      profile_id INTEGER NOT NULL DEFAULT 0, \
      key TEXT NOT NULL, \
      value TEXT NULL, \
      PRIMARY KEY(profile_id, key) \
      );');

      tx.executeSql('CREATE TABLE IF NOT EXISTS settings ( \
      key TEXT NOT NULL PRIMARY KEY, \
      value TEXT NULL \
      );');

      tx.executeSql("INSERT INTO settings (key, value) VALUES (?, ?)", ['content_timestamp', app.buildTime]);

      localDB.installInsCarriersPlansFromServer(tx);
      localDB.markInstalled(tx);
    },

    /**
     * Given an array of data, installs it into the "content" table
     *
     * @param {Array} content An array of objects; see the JSON generated by
     *                 app.server.urlFetchLeafNodes and app.server.urlFetchListNodes
     * @returns {jQuery.Promise} The handler will receive a boolean parameter; TRUE if the
     *                 installation succeeded, else FALSE
     */
    installContent: function(content) {
      var defer = $.Deferred();

      localDB.db.transaction(
        function(tx) {

          // first, truncate the table (SQLite does not support TRUNCATE queries)
          tx.executeSql('DELETE FROM "content"');

          $.each(content, function(i, item) {
            if (!item.hasOwnProperty('node')) {
              console.log('Unexpected content type in localDB.installContent');
              console.dir(item);
            } else {
              var queryColumns = [];
              var queryValues = [];
              var queryValuePlaceholders = [];

              $.each(item.node, function(column, value) {
                queryColumns.push('"' + column + '"');
                queryValues.push(value);
                queryValuePlaceholders.push('?');
              });

              var query = 'INSERT INTO "content" (' + queryColumns.join(', ') + ') VALUES (' + queryValuePlaceholders.join(',') + ')';
              tx.executeSql(query, queryValues);
            }
          });
        },
        function(e){
          console.log('Transaction failure in localDB.installContent: ' + e.message);
          defer.resolve(false);
        },
        function() {
          defer.resolve(true);
        }
      );

      return defer.promise();
    },


    /**
     * Returns the content that the app should be initialized with
     *
     * The return value is set to a token which will be replaced with the result
     * of a fetch from the content server at the time of the build via Cordova's
     * after_prepare hook.
     *
     * @returns {Array} Initial content for the app. Format mimicks server-generated
     *                 JSON. Result can be passed to localDB.installContent().
     */
    getInitialContent: function() {
      return GSL_INITIAL_DATA;
    },
    installInsCarriersPlansFromServer: function(tx) {
      app.fetchInsCarriersPlansFromServer().done(function() {
        tx.executeSql('REPLACE INTO "settings" ("key", "value") VALUES (?,?)', ['insurance_plans', JSON.stringify(app.insCarriersPlans)]);
        delete app.insCarriersPlans; // garbage cleanup
      });
    },
    installError: function(err) {
      alert("LocalDB:: Install error");
    },
    installSuccess: function() {
//      alert("success!");
    },
    markInstalled: function(tx) {
      tx.executeSql('CREATE TABLE IF NOT EXISTS installed (timestamp INTEGER, version TEXT)');
      tx.executeSql("INSERT INTO installed (timestamp, version) VALUES ( strftime('%s','now'), ?)", [localDB.version]);
      console.log('Finished DB Install, version: ' + localDB.version);
    }
};